SEATA AT 模式需要 UNDO_LOG 表

-- 注意此处0.3.0+ 增加唯一索引 ux_undo_log
CREATE TABLE `undo_log` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `branch_id` bigint(20) NOT NULL,
  `xid` varchar(100) NOT NULL,
  `context` varchar(128) NOT NULL,
  `rollback_info` longblob NOT NULL,
  `log_status` int(11) NOT NULL,
  `log_created` datetime NOT NULL,
  `log_modified` datetime NOT NULL,
  `ext` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `ux_undo_log` (`xid`,`branch_id`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

还有二个额外的conf 要在目录下
Seata 定义了 3 个核心组件：
TC（Transaction Coordinator）：事务协调器，它是事务的协调者（这里指的是 Seata 服务器），主要负责维护全局事务和分支事务的状态，驱动全局事务提交或回滚。
TM（Transaction Manager）：事务管理器，它是事务的发起者，负责定义全局事务的范围，并根据 TC 维护的全局事务和分支事务状态，做出开始事务、提交事务、回滚事务的决议。
RM（Resource Manager）：资源管理器，它是资源的管理者（这里可以将其理解为各服务使用的数据库）。它负责管理分支事务上的资源，向 TC 注册分支事务，汇报分支事务状态，驱动分支事务的提交或回滚。

TM 向 TC 申请开启一个全局事务，全局事务创建成功后，TC 会针对这个全局事务生成一个全局唯一的 XID；
XID 通过服务的调用链传递到其他服务;
RM 向 TC 注册一个分支事务，并将其纳入 XID 对应全局事务的管辖；
TM 根据 TC 收集的各个分支事务的执行结果，向 TC 发起全局事务提交或回滚决议；
TC 调度 XID 下管辖的所有分支事务完成提交或回滚操作。

如何防止脏写
业务一开启全局事务，其中包含分支事务A（修改 A）和分支事务 B（修改 B），业务二修改 A，
其中业务一执行分支事务 A 先获取本地锁，业务二则等待业务一执行完分支事务 A 之后，
获得本地锁修改 A 并入库，业务一在执行分支事务时发生异常了，
由于分支事务 A 的数据被业务二修改，导致业务一的全局事务无法回滚。

如何防止脏写？

1、业务二执行时加 @GlobalTransactional注解：
注：分支事务执行过程省略其它过程。
业务二在执行全局事务过程中，分支事务 A 提交前注册分支事务获取全局锁时，
发现业务业务一全局锁还没执行完，因此业务二提交不了，抛异常回滚，所以不会发生脏写。

2、业务二执行时加 @GlobalLock注解：
注：分支事务执行过程省略其它过程。
与 @GlobalTransactional注解效果类似，只不过不需要开启全局事务，只在本地事务提交前，检查全局锁是否存在。

2、业务二执行时加 @GlobalLock 注解 + select for update语句：
如果加了select for update语句，则会在 update 前检查全局锁是否存在，只有当全局锁释放之后，业务二才能开始执行 updateA 操作。
如果单单是 transactional，那么就有可能会出现脏写，根本原因是没有 Globallock 注解时，不会检查全局锁，这可能会导致另外一个全局事务回滚时，
发现某个分支事务被脏写了。所以加 select for update 也有个好处，就是可以重试。